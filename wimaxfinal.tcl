#check input parameters
if {$argc != 0} {
	puts ""
	puts "Wrong Number of Arguments! No arguments in this topology"
	puts ""
	exit (1)
}

# set global variables
set nb_mn 5
set nb_mn1 5
set nb_mn2 5
set nb_mn3 5				;# max number of mobile node
set packet_size	1500			;# packet size in bytes at CBR applications 
set output_dir .
set gap_size 0.05 ;#compute gap size between packets
puts "gap size=$gap_size"
set traffic_start 0
set traffic_stop  210
set simulation_stop 220

#define debug values
Mac/802_16 set debug_ 1
Mac/802_16 set rtg_ 20
Mac/802_16 set ttg_ 20
Mac/802_16 set frame_duration_ 0.004
Mac/802_16 set client_timeout_ 15 ;#to avoid BS disconnecting the SS since the traffic starts a 100s
Phy/WirelessPhy/OFDM set g_ 0.25

#define coverage area for base station: 20m coverage 
Phy/WirelessPhy set Pt_ 0.025
#Phy/WirelessPhy set freq_ 2412e+6
#Phy/WirelessPhy set RXThresh_ 2.90781e-09
Phy/WirelessPhy set RXThresh_ 2.025e-12 ;#500m radius
Phy/WirelessPhy set CSThresh_ [expr 0.9*[Phy/WirelessPhy set RXThresh_]]

# Parameter for wireless nodes
set opt(chan)           Channel/WirelessChannel    ;# channel type
set opt(prop)           Propagation/TwoRayGround   ;# radio-propagation model
set opt(netif)          Phy/WirelessPhy/OFDM       ;# network interface type
set opt(mac)            Mac/802_16/BS              ;# MAC type
set opt(ifq)            Queue/DropTail/PriQueue    ;# interface queue type
set opt(ll)             LL                         ;# link layer type
set opt(ant)            Antenna/OmniAntenna        ;# antenna model
set opt(ifqlen)         50              	   ;# max packet in ifq
set opt(adhocRouting)   AODV                       ;# routing protocol


set opt(x)		11328		;# the width (x-axis) of the simulation
set opt(y)		6212	;# the width (x-axis) of the simulation

# loading the simulation scenario generated by TraNS
set opt(sc)		/home/starak/Download/vanets/TraNSv1.2/examples/mobility_traces/TGR36061_crop.tcl


Mac/802_11 set basicRate_ 11Mb
Mac/802_11 set dataRate_ 11Mb
Mac/802_11 set bandwidth_ 11Mb

# directory for the traces 
set opt(tracedir)   /home/starak/Download/vanets/TraNSv1.2/802.11panalysis/
set opt(filename)   /home/starak/Desktop/out


#defines function for flushing and closing files
proc finish {} {
        global ns_ tf output_dir nb_mn nb_mns
	global ns namfd
        global opt
        $ns_ flush-trace

    
        # NAM
    	close $namfd
        close $tf


	exit 0
}

#create the simulator
set ns_ [new Simulator]
$ns_ use-newtrace

set namfd [open $opt(filename).nam w]           ;# set up nam trace file
$ns_ namtrace-all-wireless $namfd $opt(x) $opt(y)

#create the topography
set topo [new Topography]
$topo load_flatgrid $opt(x) $opt(y)
#puts "Topology created"

#open file for trace
set tf [open $opt(filename).res w]
$ns_ trace-all $tf
#puts "Output file configured"

#set up for hierarchical routing (needed for routing over a basestation)
#puts "start hierarchical addressing"

$ns_ node-config -addressType hierarchical
AddrParams set domain_num_ 6          			;# domain number
lappend cluster_num 1 1 1 1 2 2         			;# cluster number for each domain 
AddrParams set cluster_num_ $cluster_num
lappend eilastlevel 1 1 1 1 [expr ($nb_mn+1)] [expr ($nb_mn1+1)] [expr ($nb_mn2+1)] [expr ($nb_mn3+1)]	;# number of nodes for each cluster (1 for sink and one for mobile nodes + base station
AddrParams set nodes_num_ $eilastlevel
#puts "Configuration of hierarchical addressing done"

# Create God
create-god [expr ($nb_mn +$nb_mn1 +$nb_mn2 + $nb_mn3+ 8)]				;# nb_mn + 2 (base station and sink node)
#puts "God node created"

#creates the sink node in first addressing space.
set sinkNode [$ns_ node 0.0.0]
$sinkNode color red
#provide some co-ord (fixed) to base station node 1450.81 1345.86
$sinkNode set X_ 4527.0
$sinkNode set Y_ 2699.0
$sinkNode set Z_ 0.0
#puts "sink node created"

set sinkNode3 [$ns_ node 1.0.0]
$sinkNode3 color red
#provide some co-ord (fixed) to base station node
$sinkNode3 set X_ 4968.0
$sinkNode3 set Y_ 2900.0
$sinkNode3 set Z_ 0.0
#puts "sink node created"

set sinkNode2 [$ns_ node 2.0.0]
$sinkNode2 color red
#provide some co-ord (fixed) to base station node
$sinkNode2 set X_ 4546.0
$sinkNode2 set Y_ 2177.0
$sinkNode2 set Z_ 0.0
#puts "sink node created"

set sinkNode4 [$ns_ node 3.0.0]
$sinkNode4 color red
#provide some co-ord (fixed) to base station node
$sinkNode4 set X_ 4300.0
$sinkNode4 set Y_ 1700.0
$sinkNode4 set Z_ 0.0
#puts "sink node created"

#create common channel
set channel [new $opt(chan)]

#creates the Access Point (Base station)
$ns_ node-config -adhocRouting $opt(adhocRouting) \
                 -llType $opt(ll) \
                 -macType Mac/802_16/BS \
                 -ifqType $opt(ifq) \
                 -ifqLen $opt(ifqlen) \
                 -antType $opt(ant) \
                 -propType $opt(prop)    \
                 -phyType $opt(netif) \
                 -channel $channel \
                 -topoInstance $topo \
                 -wiredRouting ON \
                 -agentTrace ON \
                 -routerTrace ON \
                 -macTrace ON  \
                 -movementTrace ON
#puts "Configuration of base station"

set bstation [$ns_ node 4.0.0]  
$bstation random-motion 0
#puts "Base-Station node created"
#provide some co-ord (fixed) to base station node
$bstation set X_ 4537.0
$bstation set Y_ 2699.0
$bstation set Z_ 0.0
[$bstation set mac_(0)] set-channel 0

##Fix: add MOB_SCN handler
set wimaxctrl [new Agent/WimaxCtrl]
$wimaxctrl set-mac [$bstation set mac_(0)]
$ns_ attach-agent $bstation $wimaxctrl

set bstation3 [$ns_ node 4.1.0]  
$bstation3 random-motion 0
#puts "Base-Station node created"
#provide some co-ord (fixed) to base station node 1281.39 892.97
$bstation3 set X_ 4978.0
$bstation3 set Y_ 2900.0
$bstation3 set Z_ 0.0
[$bstation3 set mac_(0)] set-channel 0

#Fix: add MOB_SCN handler
set wimaxctrl3 [new Agent/WimaxCtrl]
$wimaxctrl3 set-mac [$bstation3 set mac_(0)]
$ns_ attach-agent $bstation3 $wimaxctrl3


set bstation2 [$ns_ node 5.0.0]  
$bstation2 random-motion 0
#puts "Base-Station node created"
#provide some co-ord (fixed) to base station node 1281.39 892.97
$bstation2 set X_ 4556.0
$bstation2 set Y_ 2177.0
$bstation2 set Z_ 0.0
[$bstation2 set mac_(0)] set-channel 1

#Fix: add MOB_SCN handler
set wimaxctrl2 [new Agent/WimaxCtrl]
$wimaxctrl2 set-mac [$bstation2 set mac_(0)]
$ns_ attach-agent $bstation2 $wimaxctrl2



set bstation4 [$ns_ node 5.1.0]  
$bstation4 random-motion 0
#puts "Base-Station node created"
#provide some co-ord (fixed) to base station node 1281.39 892.97
$bstation4 set X_ 4310.0
$bstation4 set Y_ 1700.0
$bstation4 set Z_ 0.0
[$bstation4 set mac_(0)] set-channel 1

#Fix: add MOB_SCN handler
set wimaxctrl4 [new Agent/WimaxCtrl]
$wimaxctrl4 set-mac [$bstation4 set mac_(0)]
$ns_ attach-agent $bstation4 $wimaxctrl4

#Fix: Add neighbor information to the BSs
$wimaxctrl add-neighbor [$bstation3 set mac_(0)] $bstation3
$wimaxctrl3 add-neighbor [$bstation set mac_(0)] $bstation
$wimaxctrl2 add-neighbor [$bstation4 set mac_(0)] $bstation4
$wimaxctrl4 add-neighbor [$bstation2 set mac_(0)] $bstation2



# creation of the mobile nodes
$ns_ node-config -macType Mac/802_16/SS \
                -wiredRouting OFF \
                -macTrace ON  				;# Mobile nodes cannot do routing.
for {set i 0} {$i < $nb_mn} {incr i} {
	set node_($i) [$ns_ node 4.0.[expr $i + 1]] 	;# create the node with given @.	
	$node_($i) random-motion 0			;# disable random motion
	$node_($i) base-station [AddrParams addr2id [$bstation node-addr]] ;#attach mn to basestation

        puts "wireless node $i created ..."			;# debug info

        [$node_($i) set mac_(0)] set-channel 0
        [$node_($i) set mac_(0)] set-diuc 7   ;# Change the node profile here (7=64QAM_3_4)

        #create source traffic
	#Create a UDP agent and attach it to node n0
	set udp_($i) [new Agent/UDP]
	$udp_($i) set packetSize_ 1500
	$ns_ attach-agent $node_($i) $udp_($i)

	# Create a CBR traffic source and attach it to udp0
	set cbr_($i) [new Application/Traffic/CBR]
	#puts "zone1"
	$cbr_($i) set packetSize_ $packet_size
	$cbr_($i) set interval_ $gap_size
	$cbr_($i) attach-agent $udp_($i)

	#create an sink into the sink node

	# Create the Null agent to sink traffic
	set null_($i) [new Agent/Null] 
	$ns_ attach-agent $sinkNode $null_($i)
	
	# Attach the 2 agents
	$ns_ connect $udp_($i) $null_($i)

	#$ns_ at 50 "$cbr_($i) start"
	#$ns_ at 150 "$cbr_($i) stop"
}

#for next set of nodes

for {set i $nb_mn} {$i < $nb_mn+$nb_mn1} {incr i} {
	set node_($i) [$ns_ node 5.1.[expr $i + 1]] 	;# create the node with given @.	
	$node_($i) random-motion 0			;# disable random motion
	$node_($i) base-station [AddrParams addr2id [$bstation4 node-addr]] ;#attach mn to basestation2
        puts "wireless node $i created ..."			;# debug info

        [$node_($i) set mac_(0)] set-channel 0
        [$node_($i) set mac_(0)] set-diuc 7   ;# Change the node profile here (7=64QAM_3_4)

        #create source traffic
	#Create a UDP agent and attach it to node n0
	set udp_($i) [new Agent/UDP]
	$udp_($i) set packetSize_ 1500
	$ns_ attach-agent $node_($i) $udp_($i)

	# Create a CBR traffic source and attach it to udp0
	set cbr_($i) [new Application/Traffic/CBR]
	$cbr_($i) set packetSize_ $packet_size
	$cbr_($i) set interval_ $gap_size
	$cbr_($i) attach-agent $udp_($i)

	#create an sink into the sink node

	# Create the Null agent to sink traffic
	set null_($i) [new Agent/Null] 

	$ns_ attach-agent $sinkNode4 $null_($i)
	# Attach the 2 agents
	$ns_ connect $udp_($i) $null_($i)

	#$ns_ at 50 "$cbr_($i) start"
	#$ns_ at 150 "$cbr_($i) stop"
}

for {set i 10} {$i < $nb_mn+$nb_mn1+$nb_mn2} {incr i} {
	set node_($i) [$ns_ node 5.0.[expr $i + 1]] 	;# create the node with given @.	
	$node_($i) random-motion 0			;# disable random motion
	$node_($i) base-station [AddrParams addr2id [$bstation2 node-addr]] ;#attach mn to basestation2
        puts "wireless node $i created ..."			;# debug info

        [$node_($i) set mac_(0)] set-channel 1
        [$node_($i) set mac_(0)] set-diuc 7   ;# Change the node profile here (7=64QAM_3_4)

        #create source traffic#
	#Create a UDP agent and attach it to node n0
	set udp_($i) [new Agent/UDP]
	$udp_($i) set packetSize_ 1500
	$ns_ attach-agent $node_($i) $udp_($i)

	# Create a CBR traffic source and attach it to udp0
	set cbr_($i) [new Application/Traffic/CBR]
	$cbr_($i) set packetSize_ $packet_size
	$cbr_($i) set interval_ $gap_size
	$cbr_($i) attach-agent $udp_($i)

	#create an sink into the sink node

	# Create the Null agent to sink traffic
	set null_($i) [new Agent/Null] 

	$ns_ attach-agent $sinkNode2 $null_($i)
	# Attach the 2 agents
	$ns_ connect $udp_($i) $null_($i)

	#$ns_ at 50 "$cbr_($i) start"
	#$ns_ at 150 "$cbr_($i) stop"
}

for {set i 15} {$i < $nb_mn+$nb_mn1+$nb_mn2+$nb_mn3} {incr i} {
	set node_($i) [$ns_ node 4.1.[expr $i + 1]] 	;# create the node with given @.	
	$node_($i) random-motion 0			;# disable random motion
	$node_($i) base-station [AddrParams addr2id [$bstation3 node-addr]] ;#attach mn to basestation2
        puts "wireless node $i created ..."			;# debug info

        [$node_($i) set mac_(0)] set-channel 1
        [$node_($i) set mac_(0)] set-diuc 7   ;# Change the node profile here (7=64QAM_3_4)

        #create source traffic#
	#Create a UDP agent and attach it to node n0
	set udp_($i) [new Agent/UDP]
	$udp_($i) set packetSize_ 1500
	$ns_ attach-agent $node_($i) $udp_($i)

	# Create a CBR traffic source and attach it to udp0
	set cbr_($i) [new Application/Traffic/CBR]
	$cbr_($i) set packetSize_ $packet_size
	$cbr_($i) set interval_ $gap_size
	$cbr_($i) attach-agent $udp_($i)

	#create an sink into the sink node

	# Create the Null agent to sink traffic
	set null_($i) [new Agent/Null] 

	$ns_ attach-agent $sinkNode3 $null_($i)
	# Attach the 2 agents
	$ns_ connect $udp_($i) $null_($i)

	#$ns_ at 50 "$cbr_($i) start"
	#$ns_ at 150 "$cbr_($i) stop"
}


# create the link between sink node and base station
$ns_ duplex-link $sinkNode $bstation 100Mb 1ms DropTail
$ns_ duplex-link $sinkNode3 $bstation3 100Mb 1ms DropTail
$ns_ duplex-link $sinkNode3 $bstation3 100Mb 1ms DropTail
$ns_ duplex-link $sinkNode4 $bstation4 100Mb 1ms DropTail

# Traffic scenario: if all the nodes start talking at the same
# time, we may see packet loss due to bandwidth request collision

set diff 0.02
for {set i 0} {$i < $nb_mn+$nb_mn1+$nb_mn2+$nb_mn3} {incr i} {
    $ns_ at [expr $traffic_start+$i*$diff] "$cbr_($i) start"
    $ns_ at [expr $traffic_stop+$i*$diff] "$cbr_($i) stop"
}


# Start and end the simulation
source $opt(sc)                     ;# load scenario

$ns_ at $simulation_stop "finish"
#$ns_ at $simulation_stop "$ns_ halt"
# Run the simulation
puts "Running simulation for $nb_mn mobile nodes..."
$ns_ run
puts "Simulation done."
